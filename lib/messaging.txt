import sodium from 'libsodium-wrappers';

export async function generateKey() {
  await sodium.ready;
  return sodium.crypto_secretbox_keygen();
}

export async function encrypt(message, key) {
  await sodium.ready;
  const nonce = sodium.randombytes_buf(24);
  const encrypted = sodium.crypto_secretbox_easy(
    new TextEncoder().encode(message),
    nonce,
    key
  );
  return {
    ciphertext: btoa(String.fromCharCode(...encrypted)),
    nonce: btoa(String.fromCharCode(...nonce)),
  };
}

export async function decrypt(ciphertext, nonce, key) {
  await sodium.ready;
  try {
    const data = Uint8Array.from(atob(ciphertext), c => c.charCodeAt(0));
    const no = Uint8Array.from(atob(nonce), c => c.charCodeAt(0));
    const decrypted = sodium.crypto_secretbox_open_easy(data, no, key);
    return new TextDecoder().decode(decrypted);
  } catch (e) {
    return "⚠️ Failed to decrypt";
  }
}